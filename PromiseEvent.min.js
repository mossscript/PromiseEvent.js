/*!
 * PromiseEvent.js v1.0.0
 * (c) 2025 Mossscript 
 * Released under the Apache 2.0 License
 */
function PromiseEvent(e){let t=new EventTarget,n=i(e).main?new Promise(e):void 0;function r(e,n){t.dispatchEvent(new CustomEvent(e,{detail:n}))}function i(e){return{get main(){return!!e&&("function"!=typeof e?(s(10),!1):!(e.length<2)||(s(11),!1))},get all(){return void 0===e?(s(20),!1):Array.isArray(e)?0===e.length?(s(22),!1):!!e.every(e=>e instanceof Promise)||(s(23),!1):(s(21),!1)}}}function s(e){throw new Error(`[Code ${e}] ${{10:"The provided argument is not a function.",11:"The provided function does not have two arguments.",20:"No argument was provided.",21:"The provided argument is not an array.",22:"The provided array has no items.",23:"The items in the array are not valid promises."}[e]||"Unknown error."}`)}let o={all(e){i(e).all;let t=new EventTarget,n=e.length,r=0,s=[],o=[];function a(e,n){t.dispatchEvent(new CustomEvent(e,{detail:n}))}let d={addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t),dispatchEvent:t.dispatchEvent.bind(t),on(e,n){t.addEventListener(e,e=>n(e.detail),{once:!0})},set onprogress(e){t.addEventListener("progress",t=>e(t.detail))},set onresolve(e){t.addEventListener("resolve",t=>e(t.detail))},set onreject(e){t.addEventListener("reject",t=>e(t.detail))},set onfinish(e){t.addEventListener("finish",t=>e(t.detail),{once:!0})},get total(){return n},get results(){return o},get errors(){return s}};return e.forEach((e,t)=>{e.then(e=>{queueMicrotask(()=>{o[t]=e,r++,a("progress",r),a("resolve",{index:t,result:e}),r===n&&a("finish",{results:o,errors:s})})}).catch(e=>{queueMicrotask(()=>{o[t]=null,s[t]=e,r++,a("progress",r),a("reject",{index:t,error:e}),r===n&&a("finish",{results:o,errors:s})})})}),d},addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t),dispatchEvent:t.dispatchEvent.bind(t),on(e,n){t.addEventListener(e,e=>n(e.detail),{once:!0})},set onresolve(e){t.addEventListener("resolve",t=>e(t.detail),{once:!0})},set onreject(e){t.addEventListener("reject",t=>e(t.detail),{once:!0})},promise:n};return n&&n.then(e=>{queueMicrotask(()=>{r("resolve",e)})}).catch(e=>{queueMicrotask(()=>{r("reject",e)})}),o}